<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        90+aAP/Z
</value>
  </data>
</root>